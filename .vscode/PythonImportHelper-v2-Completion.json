[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"blackmagic-transport\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"blackmagic-transport\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"blackmagic-transport\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"blackmagic-transport\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"blackmagic-transport\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "HyperDeckClient",
        "kind": 6,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "class HyperDeckClient:\n    def __init__(self, base_url: str):\n        self.base_url = base_url.rstrip(\"/\") + \"/\"\n    def _get(self, path: str):\n        url = urljoin(self.base_url, path.lstrip(\"/\"))\n        r = requests.get(url, timeout=TIMEOUT)\n        r.raise_for_status()\n        return r.json()\n    def _post(self, path: str, payload: dict | None = None):\n        url = urljoin(self.base_url, path.lstrip(\"/\"))",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "HyperDeckGUI",
        "kind": 6,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "class HyperDeckGUI(ttk.Frame):\n    def __init__(self, master, base_url: str, transport_idx: int = 0):\n        super().__init__(master, padding=12)\n        self.client = HyperDeckClient(base_url)\n        self.transport_idx = transport_idx\n        self._last_transport_json = {}\n        self._last_custom_url = \"\"  # remember last custom entry\n        self._build_ui(master)\n        self.after(POLL_INTERVAL_MS, self.refresh_state)\n    def _build_ui(self, master):",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "normalize_base_url",
        "kind": 2,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "def normalize_base_url(s: str) -> str:\n    s = (s or \"\").strip()\n    if not s:\n        return \"\"\n    # If user typed only IP or hostname, add http://\n    if not re.match(r\"^https?://\", s, re.I):\n        s = \"http://\" + s\n    # If user provided just host, host:port, or host with slash, ensure path\n    # Strip any trailing spaces\n    s = s.strip()",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "derive_state",
        "kind": 2,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "def derive_state(tr: dict) -> str:\n    for k in [\"status\", \"state\", \"transport\", \"transportState\", \"transportMode\", \"mode\", \"playbackStatus\"]:\n        v = tr.get(k)\n        if isinstance(v, str) and v.strip():\n            return v\n    truthy = lambda x: str(x).lower() in {\"1\", \"true\", \"yes\", \"on\"}\n    if truthy(tr.get(\"isRecording\")) or truthy(tr.get(\"recording\")):\n        return \"Recording\"\n    if truthy(tr.get(\"isPlaying\")) or truthy(tr.get(\"playing\")):\n        return \"Playing\"",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "derive_timecode",
        "kind": 2,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "def derive_timecode(tr: dict) -> str:\n    for k in [\"position\", \"timecode\", \"time\", \"tc\", \"currentTimecode\"]:\n        v = tr.get(k)\n        if isinstance(v, str) and v.strip():\n            return v\n        if isinstance(v, (int, float)):\n            s = int(v)\n            h, rem = divmod(s, 3600)\n            m, s = divmod(rem, 60)\n            return f\"{h:02d}:{m:02d}:{s:02d}:00\"",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "derive_active_clip_name",
        "kind": 2,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "def derive_active_clip_name(clip_info: dict | None) -> str:\n    if not clip_info:\n        return \"—\"\n    for k in [\"name\", \"clipName\", \"title\", \"filename\"]:\n        v = clip_info.get(k)\n        if isinstance(v, str) and v.strip():\n            return v\n    return \"unnamed\"\nclass HyperDeckGUI(ttk.Frame):\n    def __init__(self, master, base_url: str, transport_idx: int = 0):",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "def main():\n    default_base = DECK_CHOICES[\"DDR 28 (172.16.17.52)\"]\n    root = tk.Tk()\n    style = ttk.Style()\n    try:\n        style.theme_use(\"clam\")\n    except Exception:\n        pass\n    app = HyperDeckGUI(root, base_url=default_base, transport_idx=0)\n    root.mainloop()",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "POLL_INTERVAL_MS",
        "kind": 5,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "POLL_INTERVAL_MS = 1000\nTIMEOUT = 2.5\n# Deck presets\nDECK_CHOICES = {\n    \"DDR 27 (172.16.17.51)\": \"http://172.16.17.51/control/api/v1/\",\n    \"DDR 28 (172.16.17.52)\": \"http://172.16.17.52/control/api/v1/\",\n    \"Custom\": \"\",  # enabled via text field\n}\n# Accepts ip, host, with or without scheme, with or without trailing path\n# Returns normalized base url like http://x.x.x.x/control/api/v1/",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "TIMEOUT",
        "kind": 5,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "TIMEOUT = 2.5\n# Deck presets\nDECK_CHOICES = {\n    \"DDR 27 (172.16.17.51)\": \"http://172.16.17.51/control/api/v1/\",\n    \"DDR 28 (172.16.17.52)\": \"http://172.16.17.52/control/api/v1/\",\n    \"Custom\": \"\",  # enabled via text field\n}\n# Accepts ip, host, with or without scheme, with or without trailing path\n# Returns normalized base url like http://x.x.x.x/control/api/v1/\ndef normalize_base_url(s: str) -> str:",
        "detail": "blackmagic-transport",
        "documentation": {}
    },
    {
        "label": "DECK_CHOICES",
        "kind": 5,
        "importPath": "blackmagic-transport",
        "description": "blackmagic-transport",
        "peekOfCode": "DECK_CHOICES = {\n    \"DDR 27 (172.16.17.51)\": \"http://172.16.17.51/control/api/v1/\",\n    \"DDR 28 (172.16.17.52)\": \"http://172.16.17.52/control/api/v1/\",\n    \"Custom\": \"\",  # enabled via text field\n}\n# Accepts ip, host, with or without scheme, with or without trailing path\n# Returns normalized base url like http://x.x.x.x/control/api/v1/\ndef normalize_base_url(s: str) -> str:\n    s = (s or \"\").strip()\n    if not s:",
        "detail": "blackmagic-transport",
        "documentation": {}
    }
]